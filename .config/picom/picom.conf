#----- SHADOW -----------------------------------------------------------------
# shadow                = true;	# Enabled client-side shadows on windows
shadow = false;
# shadow-radius         = 8;      # The blur radius for shadows (default 12)
shadow-radius         = 60;      # The blur radius for shadows (default 12)
shadow-opacity        = 0.75;   # The opacity of the shadow (default .75)
shadow-offset-x       = -5;     # The left offset for shadows (default -15)
shadow-offset-y       = -5;     # The top offset for shadows (default -15)
shadow-red            = 0;      # The red color value of the shadow (default 0)
shadow-green          = 0;      # The green color value of the shadow (default 0)
shadow-blue           = 0;      # The blue color value of the shadow (default 0)
shadow-color          = "#000000" # Hex color for the shadow (default #000000)
shadow-exclude = [
  "class_g = 'i3bar'",
  # "class_g = 'dwm'",
  "class_g = 'St'",
  "class_g = 'Alacritty'",
  "class_g = 'Rofi'",
  "class_g = 'Xfce4-notifyd'",
  "class_g = 'Brave-browser'",
  "class_g = 'Polybar'",
  "class_g = 'LibreWolf'",
  "class_g = 'firefox'",
  "class_g = 'Dunst'"
];
# Specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use 
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = "" 

#----- BACKEND OPTIONS ------------------------------------------------------------------
experimental-backends = true;
backend               = "glx";
# backend 	      = "xrender";
vsync                 = true;
# refresh-rate          = 144;
glx-no-stencil        = true; #  Avoid using stencil buffer, useful if you don't have a stencil buffer.
  # Might cause incorrect opacity when rendering transparent content (but never
  # practically happened) and may not work with blur-background.
glx-copy-from-front   = false; # GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
  # My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
  # but a 20% increase when only 1/4 is.
  # My tests on nouveau show terrible slowdown.
mark-wmwin-focused = true; # try to mark windows that has WM_STATE as active
mark-ovredir-focused = true; # Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
detect-rounded-corners = true; # detect windows w rounded corners and dont consider them shaped windows, not very high accuracy
detect-client-opacity = true; # detect opacity on windows when wm does not have _NET_WM_OPACITY
# use-ewmh-active-win = false # use EMWH net active window to detect active windows if WM supports it
# unredir-if-possible = false # unredirect all windows if a fullscreen opaque window is detected to maximize performance of fullscreen window, causes flickering
# unredir-if-possible-delay = 0 # delay b4 unredirecting windows, in ms
# unredir-if-possible-exclude = []
detect-transient = true;  # Use 'WM_TRANSIENT_FOR' to group windows, and consider windows in the same group focused at the same time
detect-client-leader = true; # Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same group focused at the same time, transient has higher priority
xrender-sync-fence = true; # use X Sync fence to sync clients' draw calls, to make sure all draw calls are finished before picom starts drawing, needed on nvidia drivers with glx backend for some users
# force-win-blend = false # force all windows to be painted with blending. Useful if you have a glx-fshader-win that could turn opaque pixels transparent
# no-ewmh-fullscreen = false # do not use EMWH to detect fullscreen windows, revers to checking if a window based on only on size + coords
# transparent-clipping = false # make transparent windows clip other windows like non-transpaernt windows do, instead of blending on top of them
# max-brightness = 1.0 # window brihtheness limit. Brightness is estimated by averaging all pixels in the window, so comes w/ performance hit. Setting to 1.0 disables this behavior, requires --use-damage to be disabled

#----- WORKSPACE FADING -------------------------------------------------------
fading                = true;
fade-delta            = 5;    # The time between fade steps in milis
fade-in-step          = 0.03; # hchange between steps while fading in
fade-out-step         = 0.03; # change between steps while fading out
# no-fading-openclose = false  Do not fade on window open/close.
# no-fading-destroyed-argb = false # Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.

#----- APPLICATION FOCUS ------------------------------------------------------
# Specify a list of conditions of windows that should always be considered focused.
# focus-exclude = []
# focus-exclude = [
#   "class_g = 'Cairo-clock'",
#   "class_g = 'Bar'",                    # lemonbar
#   "class_g = 'slop'"                    # maim
# ];

#----- UNUSED OPTIONS ---------------------------------------------------------
#no-dock-shadow        = true;  # Avoid drawing shadows on dock/panel windows
#no-dnd-shadow         = false;	# Don't draw shadows on drag-and-drop windows
#clear-shadow          = false; # Zero the part of the shadow's mask behind the window (experimental)

#----- ANIMATIONS -------------------------------------------------------
transition-length = 300
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true

#----- BLUR -------------------------------------------------------------------
#blur-background-frame = false;
#blur-background-fixed = false;
# blur-kern             = "3x3box"; # Specify the blur convolution kernel
blur-kern = "11x11gaussian";
blur-method           = "dual_kawase";
# blur-method = "kawase";
# blur-strength = 7;
blur-strength = 5.25;
blur-background = false; # blur bg of semi-trans / ARGB windows, bad in performance driver-dependent behavior, name of switch may change
blur-background-frame = false; # blur bg of windows when window frame is not opaque, implies blur-backround, bad performance, driver dependent
blur-background-fixed = false; # used fixed blur strength rather than adjusting according to window opacity
#blur-strength         = 5;
# blur-size = 12
# blur-deviation = false
blur-deviation = 1.0;

blur-background-exclude = [
    "class_g = 'Xsnow'",
#	"class_g = 'scratch_term'",
#	"class_g = 'Remmina'"
#	"class_g = 'Zoom'",
    "class_g = 'Polybar'",
#	"class_g = 'Rofi'",
#	"class_g = 'Dunst'",
    "class_g = 'firefox'",
    "class_g = 'zoom'",
#	"class_g = 'Steam'",
#	"class_g = 'Nautilus'",
#	"class_g = 'Alacritty'",
#	"class_g = 'Gnome-screenshot'"
];

#----- ROUNDED CORNERS --------------------------------------------------------
#corner-radius         = 7.5;
#rounded-corners-exclude = [
#  "class_g = 'Rofi'",
#  "class_g = 'Polybar'",
#  "class_g = 'Dunst'",
#	 "class_g = 'i3bar'",
#  "class_g = 'Pamac-manager'",
#  "class_g = 'Alacritty'",
#  "class_g = 'Steam'"
#];
corner-radius = 10.0;
rounded-corners-exclude = [
  #"window_type = 'normal'",
  # "class_g = 'awesome'",
  # "class_g = 'URxvt'",
  # "class_g = 'XTerm'",
  # "class_g = 'kitty'",
  # "class_g = 'Alacritty'",
  "class_g = 'Polybar'",
  # "class_g = 'dwm'",
  "class_g = 'Dunst'",
  # "class_g = 'code-oss'",
  #"class_g = 'TelegramDesktop'",
  # "class_g = 'firefox'",
  # "class_g = 'Thunderbird'"
  "class_g = 'Xsnow'",
];

round-borders = 1;
round-borders-exclude = [
  "class_g = 'Xsnow'",
  #"class_g = 'TelegramDesktop'",
];
# Specify a list of border width rules, in the format `PIXELS:PATTERN`, 
# Note we don't make any guarantee about possible conflicts with the
# border_width set by the window manager.
#
# example:
#    round-borders-rule = [ "2:class_g = 'URxvt'" ];
#
# round-borders-rule = [
#   "3:class_g      = 'XTerm'",
#   "3:class_g      = 'URxvt'",
#   "10:class_g     = 'Alacritty'",
#   "15:class_g     = 'Signal'"
# ];

#----- TRANSPARENCY -----------------------------------------------------------
frame-opacity         = 1;    # opacity of window titlebars + borders default 1
inactive-dim          = 0.00; # dim inactive window default 0
active-opacity        = 1.0;  # Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
inactive-opacity      = 1.0;   # opacity of inactive windows defaults to 1
# popup_menu = { opacity = 0.8; }   # opacity of drop and popup menus default 1
# dropdown_menu = { opacity = 0.8; }
# inactive-dim-fixed = 1.0 # Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-opacity-override = true # Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
inactive-opacity-override = false;
opacity-rule = [
  "100:class_g		= 'VirtualBox Manager'",
  "100:class_g      = 'Xsnow'",
  # "100:class_g      = 'firefox'",
  "100:name       *?= 'nvim'",
  "100:name       *?= 'vim'",
  "100:name       *?= 'vi'",
  "100:name       *?= 'nano'",
];

#---- DAMAGE -------------------------------------------------------
# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true;
# use-damage = false;

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
# resize-damage = 1
